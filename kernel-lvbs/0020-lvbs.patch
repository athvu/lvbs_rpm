From 0fa594bbcf2857df56a1b5d41eee5f401553fa2f Mon Sep 17 00:00:00 2001
From: "Madhavan T. Venkataraman" <madvenka@linux.microsoft.com>
Date: Wed, 10 Jul 2024 02:41:54 -0500
Subject: [PATCH 20/22] Free module init sections

VTL0 calls this prior to freeing a module's init sections. Pass the module
token to VTL1 so it can reset the EPT permissions for the init sections
to RW_. Also, make the ro_after_init section read-only in the EPT.
After this step, free module init sections in VTL1.

Signed-off-by: Madhavan T. Venkataraman <madvenka@linux.microsoft.com>
---
 drivers/hv/hv_vsm.c  | 13 +++++++++++++
 drivers/hv/hv_vsm.h  |  1 +
 include/linux/heki.h |  4 ++++
 kernel/module/main.c |  1 +
 virt/heki/module.c   | 19 +++++++++++++++++++
 5 files changed, 38 insertions(+)

diff --git a/drivers/hv/hv_vsm.c b/drivers/hv/hv_vsm.c
index 45eedcf4b04f..1517fe7f0aeb 100644
--- a/drivers/hv/hv_vsm.c
+++ b/drivers/hv/hv_vsm.c
@@ -166,12 +166,25 @@ static long hv_vsm_validate_module(phys_addr_t pa, unsigned long nranges,
 	return hv_vsm_vtlcall(&args);
 }
 
+static int hv_vsm_free_module_init(long token)
+{
+	struct vtlcall_param args = {0};
+
+	if (!hv_vsm_boot_success)
+		return -ENOTSUPP;
+
+	args.a0 = VSM_VTL_CALL_FUNC_ID_FREE_MODULE_INIT;
+	args.a1 = token;
+	return hv_vsm_vtlcall(&args);
+}
+
 static struct heki_hypervisor hyperv_heki_hypervisor = {
 	.lock_crs = hv_vsm_lock_crs,
 	.finish_boot = hv_vsm_signal_end_of_boot,
 	.protect_memory = hv_vsm_protect_memory,
 	.load_kdata = hv_vsm_load_kdata,
 	.validate_module = hv_vsm_validate_module,
+	.free_module_init = hv_vsm_free_module_init,
 };
 
 void __init hv_vsm_init_heki(void)
diff --git a/drivers/hv/hv_vsm.h b/drivers/hv/hv_vsm.h
index 39591c2202b0..2ce3b7938c46 100644
--- a/drivers/hv/hv_vsm.h
+++ b/drivers/hv/hv_vsm.h
@@ -16,6 +16,7 @@
 #define VSM_VTL_CALL_FUNC_ID_PROTECT_MEMORY	0x1FFE4
 #define VSM_VTL_CALL_FUNC_ID_LOAD_KDATA		0x1FFE5
 #define VSM_VTL_CALL_FUNC_ID_VALIDATE_MODULE	0x1FFE6
+#define VSM_VTL_CALL_FUNC_ID_FREE_MODULE_INIT	0x1FFE7
 
 extern bool hv_vsm_boot_success;
 extern bool hv_vsm_mbec_enabled;
diff --git a/include/linux/heki.h b/include/linux/heki.h
index 48e46145cc6b..178122fc8c58 100644
--- a/include/linux/heki.h
+++ b/include/linux/heki.h
@@ -95,6 +95,9 @@ struct heki_hypervisor {
 	 */
 	long (*validate_module)(phys_addr_t pa, unsigned long nranges,
 				unsigned long flags);
+
+	/* Free module init sections. */
+	int (*free_module_init)(long token);
 };
 
 /*
@@ -150,6 +153,7 @@ void heki_add_range(struct heki_args *args, unsigned long va,
 void heki_cleanup_args(struct heki_args *args);
 void heki_load_kdata(void);
 long heki_validate_module(struct module *mod, struct load_info *info, int flags);
+void heki_free_module_init(struct module *mod);
 
 /* Arch-specific functions. */
 void heki_arch_init(void);
diff --git a/kernel/module/main.c b/kernel/module/main.c
index 3e120a27367b..17ecbd354887 100644
--- a/kernel/module/main.c
+++ b/kernel/module/main.c
@@ -2575,6 +2575,7 @@ static noinline int do_init_module(struct module *mod)
 	/* Switch to core kallsyms now init is done: kallsyms may be walking! */
 	rcu_assign_pointer(mod->kallsyms, &mod->core_kallsyms);
 #endif
+	heki_free_module_init(mod);
 	module_enable_ro(mod, true);
 	mod_tree_remove_init(mod);
 	module_arch_freeing_init(mod);
diff --git a/virt/heki/module.c b/virt/heki/module.c
index 274d68f2a038..40ebc2fa3e30 100644
--- a/virt/heki/module.c
+++ b/virt/heki/module.c
@@ -150,3 +150,22 @@ long heki_validate_module(struct module *mod, struct load_info *info, int flags)
 
 	return token;
 }
+
+void heki_free_module_init(struct module *mod)
+{
+	struct heki_hypervisor *hypervisor = heki.hypervisor;
+	int err;
+
+	if (!hypervisor)
+		return;
+
+	mutex_lock(&heki.lock);
+
+	err = hypervisor->free_module_init(mod->heki_token);
+	if (err) {
+		pr_warn("Failed to free module %s init (%d).\n",
+			mod->name, err);
+	}
+
+	mutex_unlock(&heki.lock);
+}
-- 
2.42.0


